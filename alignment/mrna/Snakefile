import glob
configfile: "config.yaml"
workdir: config["workdir"]

rule all:
   input:
      expand("rsem/{sample}.genes.results", sample=config["samples"]),
      expand("kallisto/{sample}", sample=config["samples"])

rule kallisto_quant:
   input: 
      mate1="trimmed/{sample}_R1.fastq.gz",
      mate2="trimmed/{sample}_R2.fastq.gz"
   params:
      kallisto_flags=config["kallisto"]["flags"],
      reference=config["kallisto"]["reference"],
      modules=config["kallisto"]["modules"]
   output:
      "kallisto/{sample}"
   shell:
      "module load {params.module}; kallisto quant -i {params.reference} {params.kallisto_flags} -o {output} {input.mate1} {input.mate2}"

rule rsem_quant:
   input:
      mate1="trimmed/{sample}_R1.fastq.gz", 
      mate2="trimmed/{sample}_R2.fastq.gz"
   params:
      rsem_flags=config["rsem"]["flags"],
      reference=config["rsem"]["reference"],
      modules=config["rsem"]["modules"],
      outprefix="rsem/{sample}"
   output:
      "rsem/{sample}.genes.results"
   shell:
      "pwd; module load {params.modules}; rsem-calculate-expression {params.rsem_flags} --paired-end <(gunzip -c {input.mate1}) <(gunzip -c {input.mate2}) {params.reference} {params.outprefix}"


rule trimmomatic_filter:
   input: 
      mate1="merged_fastq/{sample}_R1.fastq.gz",
      mate2="merged_fastq/{sample}_R2.fastq.gz"
   output:
      mate1="trimmed/{sample}_R1.fastq.gz",
      mate2="trimmed/{sample}_R2.fastq.gz"
   params:
      unpaired1="trimmed/{sample}_R1.unpaired.fastq.gz",
      unpaired2="trimmed/{sample}_R2.unpaired.fastq.gz",
      modules=config["trimmomatic"]["modules"],
      trim_path=config["trimmomatic"]["path"],
      trim_flags=config["trimmomatic"]["flags"],
      trim_log="trimmed/{sample}_trimlog.log"
   shell:
      "module load {params.modules}; java -jar {params.trim_path} PE {params.trim_flags} -trimlog {params.trim_log} {input.mate1} {input.mate2} {output.mate1} {params.unpaired1} {output.mate2} {params.unpaired2} MINLEN:30" 
 

rule merge_fastq:
   input: 
      mate1=lambda wildcards: glob.glob("demultiplexed_runs/*/{sample}_*_*_R1_001.fastq.gz".format(sample=wildcards.sample)),
      mate2=lambda wildcards: glob.glob("demultiplexed_runs/*/{sample}_*_*_R2_001.fastq.gz".format(sample=wildcards.sample))
   output:
      mate1="merged_fastq/{sample}_R1.fastq.gz",
      mate2="merged_fastq/{sample}_R2.fastq.gz"
   shell:
      "cat {input.mate1} > {output.mate1}; cat {input.mate2} > {output.mate2}"